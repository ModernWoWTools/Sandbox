using AuthServer.Network;
using Framework.Constants.Net;
using Framework.Logging;
using Framework.Network.Packets;

namespace AuthServer.WorldServer.Game.Packets.PacketHandler
{
    public class AddonHandler
    {
        public static void HandleAddonInfo(byte[] addonData, WorldClass session, WorldClass2 session2)
        {
            var addonInfo = new PacketWriter(ServerMessage.AddonInfo);
            BitPack BitPack = new BitPack(addonInfo);

            var addonDataReader = new PacketReader(addonData, false);

            var addonCount = addonDataReader.Read<int>();

           // var dataWriter = new PacketWriter();
            addonInfo.WriteInt32(addonCount);
            addonInfo.WriteInt32(0);

            for (int i = 0; i < addonCount; i++)
            {
                var addonName = addonDataReader.ReadCString();
                var addonEnabled = !addonDataReader.Read<bool>();
                var addonCRC = addonDataReader.Read<uint>();
                var UrlStringCRC = addonDataReader.Read<uint>();

                if (addonEnabled == false)
                    addonEnabled = true;

                Log.Message(Framework.Constants.Misc.LogType.Debug, "{0}", addonName);
                Log.Message(Framework.Constants.Misc.LogType.Debug, "{0}", addonEnabled);
                Log.Message(Framework.Constants.Misc.LogType.Debug, "0x{0:X}", addonCRC);
                Log.Message(Framework.Constants.Misc.LogType.Debug, "0x{0:X}", UrlStringCRC);


                addonInfo.WriteUInt8(2);

                BitPack.Write(addonEnabled);
                BitPack.Write(true); // enable public key
                BitPack.Write(false);
                BitPack.Flush();

                //for (int ii = 0; ii < addonPublicKey.Length; ii++)
                //    dataWriter.WriteUInt8(addonPublicKey[pubKeyOrder[ii]]);

                if (addonEnabled)
                {
                    addonInfo.WriteUInt8(1);
                    addonInfo.WriteUInt32(0);
                }

                addonInfo.Write(addonPublicKey);
            }

            //addonInfo.WriteBytes(dataWriter.ReadDataToSend(true));

                if (session2 != null)
                session2.Send(ref addonInfo);
                else
            session.Send(ref addonInfo);
        }

        static byte[] addonPublicKey =
        {
            0xC3, 0x5B, 0x50, 0x84, 0xB9, 0x3E, 0x32, 0x42, 0x8C, 0xD0, 0xC7, 0x48, 0xFA, 0x0E, 0x5D, 0x54,
            0x5A, 0xA3, 0x0E, 0x14, 0xBA, 0x9E, 0x0D, 0xB9, 0x5D, 0x8B, 0xEE, 0xB6, 0x84, 0x93, 0x45, 0x75,
            0xFF, 0x31, 0xFE, 0x2F, 0x64, 0x3F, 0x3D, 0x6D, 0x07, 0xD9, 0x44, 0x9B, 0x40, 0x85, 0x59, 0x34,
            0x4E, 0x10, 0xE1, 0xE7, 0x43, 0x69, 0xEF, 0x7C, 0x16, 0xFC, 0xB4, 0xED, 0x1B, 0x95, 0x28, 0xA8,
            0x23, 0x76, 0x51, 0x31, 0x57, 0x30, 0x2B, 0x79, 0x08, 0x50, 0x10, 0x1C, 0x4A, 0x1A, 0x2C, 0xC8,
            0x8B, 0x8F, 0x05, 0x2D, 0x22, 0x3D, 0xDB, 0x5A, 0x24, 0x7A, 0x0F, 0x13, 0x50, 0x37, 0x8F, 0x5A,
            0xCC, 0x9E, 0x04, 0x44, 0x0E, 0x87, 0x01, 0xD4, 0xA3, 0x15, 0x94, 0x16, 0x34, 0xC6, 0xC2, 0xC3,
            0xFB, 0x49, 0xFE, 0xE1, 0xF9, 0xDA, 0x8C, 0x50, 0x3C, 0xBE, 0x2C, 0xBB, 0x57, 0xED, 0x46, 0xB9,
            0xAD, 0x8B, 0xC6, 0xDF, 0x0E, 0xD6, 0x0F, 0xBE, 0x80, 0xB3, 0x8B, 0x1E, 0x77, 0xCF, 0xAD, 0x22,
            0xCF, 0xB7, 0x4B, 0xCF, 0xFB, 0xF0, 0x6B, 0x11, 0x45, 0x2D, 0x7A, 0x81, 0x18, 0xF2, 0x92, 0x7E,
            0x98, 0x56, 0x5D, 0x5E, 0x69, 0x72, 0x0A, 0x0D, 0x03, 0x0A, 0x85, 0xA2, 0x85, 0x9C, 0xCB, 0xFB,
            0x56, 0x6E, 0x8F, 0x44, 0xBB, 0x8F, 0x02, 0x22, 0x68, 0x63, 0x97, 0xBC, 0x85, 0xBA, 0xA8, 0xF7,
            0xB5, 0x40, 0x68, 0x3C, 0x77, 0x86, 0x6F, 0x4B, 0xD7, 0x88, 0xCA, 0x8A, 0xD7, 0xCE, 0x36, 0xF0,
            0x45, 0x6E, 0xD5, 0x64, 0x79, 0x0F, 0x17, 0xFC, 0x64, 0xDD, 0x10, 0x6F, 0xF3, 0xF5, 0xE0, 0xA6,
            0xC3, 0xFB, 0x1B, 0x8C, 0x29, 0xEF, 0x8E, 0xE5, 0x34, 0xCB, 0xD1, 0x2A, 0xCE, 0x79, 0xC3, 0x9A,
            0x0D, 0x36, 0xEA, 0x01, 0xE0, 0xAA, 0x91, 0x20, 0x54, 0xF0, 0x72, 0xD8, 0x1E, 0xC7, 0x89, 0xD2
        };

        static byte[] pubKeyOrder =
        {
             0x5E, 0x48, 0x26, 0x16, 0xE8, 0xB9, 0x14, 0xB8, 0x52, 0x30, 0x9E, 0xF9, 0xC5, 0x97, 0xAA, 0x76,
             0xC8, 0xED, 0x00, 0x4C, 0xF6, 0xBD, 0x79, 0xA2, 0x5F, 0xCB, 0x53, 0x7D, 0x6E, 0x45, 0xD5, 0xE3,
             0x3F, 0xC0, 0x41, 0x83, 0x09, 0x7E, 0x91, 0xE9, 0x1E, 0x7B, 0xE1, 0x1A, 0xD6, 0x0A, 0x99, 0x6A,
             0x34, 0xCA, 0xD1, 0x9A, 0x12, 0x78, 0x4B, 0xBC, 0x32, 0x1B, 0xF0, 0xC7, 0xF3, 0x92, 0x0D, 0xA3,
             0x3C, 0xAF, 0xDA, 0x7F, 0x62, 0x61, 0xB2, 0xEA, 0x25, 0xE6, 0x3D, 0x17, 0x05, 0x0B, 0x28, 0x8F,
             0xC1, 0xC3, 0x58, 0xB5, 0x57, 0x33, 0x39, 0xE5, 0xD7, 0x01, 0x68, 0x10, 0xC6, 0xEC, 0x93, 0xB6,
             0x96, 0x07, 0xA8, 0xB0, 0xAD, 0x08, 0x4A, 0xE2, 0xAC, 0x03, 0xA4, 0xF2, 0x50, 0x6B, 0x04, 0xD0,
             0xB3, 0xEE, 0xF1, 0xAE, 0x60, 0x80, 0x2F, 0x02, 0x2A, 0xFE, 0x66, 0x64, 0x2D, 0xBF, 0x55, 0x9F,
             0xAB, 0xDC, 0xBB, 0x24, 0x5C, 0x1C, 0x5A, 0x94, 0x63, 0x40, 0xE7, 0x4F, 0xFD, 0xA5, 0xB4, 0x6F,
             0x56, 0xD9, 0x42, 0xCD, 0x87, 0x8D, 0x51, 0xD3, 0x59, 0x29, 0x1F, 0x8A, 0xB7, 0xE4, 0x21, 0xF7,
             0x72, 0xFC, 0xC9, 0x4E, 0x47, 0x7A, 0xDE, 0x5B, 0x6C, 0x2C, 0x43, 0x81, 0xDB, 0x35, 0x3B, 0xDD,
             0x84, 0x0F, 0x54, 0x15, 0x44, 0xC4, 0x88, 0xEF, 0xCC, 0x4D, 0xCE, 0x22, 0x06, 0xA0, 0x0E, 0x27,
             0x0C, 0x65, 0x82, 0x67, 0xCF, 0x8B, 0x75, 0x71, 0xD4, 0x38, 0x86, 0x36, 0x69, 0xA1, 0x18, 0xFB,
             0xDF, 0x3A, 0xBA, 0x95, 0x11, 0xEB, 0x85, 0x73, 0x20, 0xD2, 0xF5, 0xD8, 0x3E, 0xE0, 0x8C, 0x2E,
             0x70, 0x74, 0x9D, 0x49, 0x6D, 0x5D, 0xA7, 0x9B, 0x89, 0xBE, 0xA6, 0x13, 0xC2, 0x90, 0x2B, 0xFA,
             0xFF, 0x23, 0x7C, 0x8E, 0xA9, 0x31, 0xF8, 0x9C, 0x77, 0xF4, 0x19, 0x37, 0xB1, 0x46, 0x98, 0x1D,
        };
    }
}
